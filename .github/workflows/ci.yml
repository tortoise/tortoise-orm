name: ci
on:
  push:
    branches-ignore:
      - master
  pull_request:
    branches-ignore:
      - master
jobs:
  test:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: 123456
          POSTGRES_USER: postgres
        options: --health-cmd=pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      TORTOISE_TEST_MODULES: tests.testmodels
      TORTOISE_MYSQL_PASS: root
      TORTOISE_POSTGRES_PASS: 123456
    strategy:
      matrix:
        python-version: [ 3.7, 3.8 ,3.9 ]
    steps:
      - name: Start MySQL
        run: sudo systemctl start mysql.service
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: false
      - name: Install requirements
        run: make deps
      - name: Run ci
        run: make ci
      - name: Run green
        env:
          TEST_RUNNER: green
        run: green
      - name: Run nose2
        env:
          TEST_RUNNER: nose2
        run: |
          nose2 --plugin tortoise.contrib.test.nose2 --db-module tests.testmodels --db-url sqlite://:memory:
      - name: Upload Coverage
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.python-version }}
          COVERALLS_PARALLEL: true

  coveralls:
    name: Finish Coveralls
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
      - name: Finished
        run: |
          pip3 install --upgrade coveralls
          coveralls --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
